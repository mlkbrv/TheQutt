import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  Image,
  Alert,
  RefreshControl,
  ActivityIndicator
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import axios from 'axios';
import { API_CONFIG, getAuthHeaders } from '../config/api';
import { useAuth } from '../contexts/AuthContext';

const ShopsScreen = ({ navigation }) => {
  const [shops, setShops] = useState([]);
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [isLoading, setIsLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [imageCache, setImageCache] = useState(new Map());
  const { token, refreshToken } = useAuth();
  
  // –†–µ—Ñ—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const hasLoadedRef = useRef(false);
  const lastFetchTimeRef = useRef(0);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const fetchShops = useCallback(async (forceRefresh = false) => {
    try {
      const now = Date.now();
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      if (!forceRefresh && shops.length > 0 && !hasLoadedRef.current) {
        console.log('üì± Shops already loaded, skipping fetch');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–µ–ª–∞–ª–∏ –ª–∏ –º—ã –∑–∞–ø—Ä–æ—Å –Ω–µ–¥–∞–≤–Ω–æ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
      if (!forceRefresh && now - lastFetchTimeRef.current < 5000) { // 5 —Å–µ–∫—É–Ω–¥
        console.log('‚ö†Ô∏è Request made recently, skipping...');
        return;
      }
      
      setIsLoading(true);
      lastFetchTimeRef.current = now;
      
      if (!token) {
        console.error('‚ùå No token available for shops request');
        Alert.alert('–û—à–∏–±–∫–∞', '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      console.log('üîë Token:', token.substring(0, 20) + '...');
      const headers = getAuthHeaders(token);
      console.log('üìã Headers:', headers);
      console.log('üåê URL:', API_CONFIG.SHOPS_URL);
      
      const response = await axios.get(API_CONFIG.SHOPS_URL, { headers });
      
      if (response.data) {
        setShops(response.data);
        hasLoadedRef.current = true;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const uniqueCategories = [...new Set(response.data.map(shop => shop.category))];
        setCategories(['all', ...uniqueCategories]);
        
        console.log(`‚úÖ Loaded ${response.data.length} shops successfully`);
      }
    } catch (error) {
      console.error('‚ùå Error fetching shops:', error);
      console.error('üìä Error response:', error.response?.data);
      console.error('üî¢ Error status:', error.response?.status);
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
      if (error.response?.status === 401 && error.response?.data?.code === 'token_not_valid') {
        console.log('üîÑ Token expired, attempting to refresh...');
        const refreshSuccess = await refreshToken();
        
        if (refreshSuccess) {
          console.log('‚úÖ Token refreshed, retrying shops request...');
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          return fetchShops(false);
        } else {
          console.log('‚ùå Failed to refresh token, user needs to login again');
          Alert.alert('–û—à–∏–±–∫–∞', '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
        }
      } else {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã');
      }
    } finally {
      setIsLoading(false);
    }
  }, [token, refreshToken, shops.length]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
  useEffect(() => {
    console.log('üîÑ useEffect triggered, token:', token ? 'exists' : 'null');
    
    if (token && !hasLoadedRef.current) {
      console.log('‚úÖ Token found, fetching shops...');
      fetchShops();
    } else if (!token) {
      console.log('‚ö†Ô∏è No token, setting loading to false');
      setIsLoading(false);
    }
  }, [token]); // –£–±–∏—Ä–∞–µ–º fetchShops –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  const onRefresh = async () => {
    setRefreshing(true);
    hasLoadedRef.current = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    await fetchShops(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setRefreshing(false);
  };

  const handleShopPress = (shop) => {
    navigation.navigate('ShopProducts', { 
      shopId: shop.id, 
      shopName: shop.name 
    });
  };



  const getCategoryIcon = (category) => {
    switch (category.toLowerCase()) {
      case 'restaurant':
        return 'üçΩÔ∏è';
      case 'cafe':
        return '‚òï';
      case 'bakery':
        return 'ü•ê';
      case 'fast food':
        return 'üçî';
      case 'bar':
        return 'üç∫';
      default:
        return 'üè™';
    }
  };

  const getImageUrl = (picturePath) => {
    if (!picturePath) return null;
    
    // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
    if (picturePath.startsWith('http://') || picturePath.startsWith('https://')) {
      return picturePath;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
    const cleanPath = picturePath.startsWith('/') ? picturePath.slice(1) : picturePath;
    const fullUrl = `${API_CONFIG.BASE_URL}/media/shop_pictures/${cleanPath}`;
    
    return fullUrl;
  };

  const isImageCached = (imageUrl) => {
    return imageCache.has(imageUrl);
  };

  const addImageToCache = (imageUrl) => {
    if (!imageCache.has(imageUrl)) {
      setImageCache(prev => new Map(prev).set(imageUrl, true));
    }
  };



  const handleImageError = (shopId, picturePath, error) => {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è:', shopId, error);
    console.log('üìÅ –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:', picturePath);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
  };

  const getCategoryColor = (category) => {
    switch (category.toLowerCase()) {
      case 'restaurant':
        return '#FF6B6B';
      case 'cafe':
        return '#4ECDC4';
      case 'bakery':
        return '#FFE66D';
      case 'fast food':
        return '#FF8E53';
      case 'bar':
        return '#A8E6CF';
      default:
        return '#2E7D32';
    }
  };

  const filteredShops = selectedCategory === 'all' 
    ? shops 
    : shops.filter(shop => shop.category === selectedCategory);

  const renderCategoryItem = ({ item }) => (
    <TouchableOpacity
      style={[
        styles.categoryItem,
        selectedCategory === item && styles.selectedCategoryItem
      ]}
      onPress={() => setSelectedCategory(item)}
    >
      <Text style={[
        styles.categoryText,
        selectedCategory === item && styles.selectedCategoryText
      ]}>
        {item === 'all' ? '–í—Å–µ' : getCategoryIcon(item) + ' ' + item}
      </Text>
    </TouchableOpacity>
  );

  const renderShopItem = ({ item }) => (
    <TouchableOpacity
      style={styles.shopCard}
      onPress={() => handleShopPress(item)}
    >
             <View style={styles.shopImageContainer}>
                  {item.picture ? (
           <>
                           <Image
                source={{ 
                  uri: getImageUrl(item.picture),
                  headers: {
                    'Accept': 'image/*',
                    'User-Agent': 'QuttApp/1.0'
                  }
                }}
                style={styles.shopImage}
                resizeMode="cover"
                onLoadStart={() => {
                  if (!isImageCached(getImageUrl(item.picture))) {
                    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è:', item.name);
                  }
                }}
                onLoad={() => {
                  const imageUrl = getImageUrl(item.picture);
                  if (!isImageCached(imageUrl)) {
                    addImageToCache(imageUrl);
                    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è:', item.name);
                  }
                }}
                onError={(error) => handleImageError(item.id, item.picture, error)}
              />
             
           </>
         ) : (
           <View style={[
             styles.shopImagePlaceholder, 
             { backgroundColor: getCategoryColor(item.category) }
           ]}>
             <Text style={styles.shopImagePlaceholderText}>
               {getCategoryIcon(item.category)}
             </Text>
           </View>
         )}
         <View style={[styles.categoryBadge, { backgroundColor: getCategoryColor(item.category) }]}>
           <Text style={styles.categoryBadgeText}>{item.category}</Text>
         </View>
       </View>
      
      <View style={styles.shopInfo}>
        <Text style={styles.shopName}>{item.name}</Text>
        <Text style={styles.shopDescription} numberOfLines={2}>
          {item.description}
        </Text>
        <Text style={styles.shopAddress}>üìç {item.address}</Text>
        {item.opening_hours && (
          <Text style={styles.shopHours}>üïí {item.opening_hours}</Text>
        )}
      </View>
    </TouchableOpacity>
  );

  if (isLoading) {
    return (
      <SafeAreaView style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#2E7D32" />
        <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã... üè™</Text>
      </SafeAreaView>
    );
  }

  if (!token) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <Text style={styles.headerTitle}>üè™ –ú–∞–≥–∞–∑–∏–Ω—ã –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã</Text>
        </View>
        <View style={styles.noAuthContainer}>
          <Text style={styles.noAuthIcon}>üîê</Text>
          <Text style={styles.noAuthTitle}>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</Text>
          <Text style={styles.noAuthText}>
            –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </Text>
          <TouchableOpacity
            style={styles.loginButton}
            onPress={() => navigation.navigate('Login')}
          >
            <Text style={styles.loginButtonText}>–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
             {/* Header */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>üè™ –ú–∞–≥–∞–∑–∏–Ω—ã –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã</Text>
      </View>

      {/* Categories */}
      <View style={styles.categoriesContainer}>
        <FlatList
          data={categories}
          renderItem={renderCategoryItem}
          keyExtractor={(item) => item}
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.categoriesList}
        />
      </View>

      {/* Shops List */}
      <FlatList
        data={filteredShops}
        renderItem={renderShopItem}
        keyExtractor={(item) => item.id.toString()}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.shopsList}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={['#2E7D32']}
          />
        }
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>üè™ –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Text>
            <Text style={styles.emptySubtext}>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</Text>
          </View>
        }
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666',
  },
  header: {
    backgroundColor: '#4CAF50',
    padding: 20,
    paddingTop: 50,
    paddingBottom: 20,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
    flex: 1,
    textAlign: 'center',
  },
  categoriesContainer: {
    backgroundColor: 'white',
    paddingVertical: 16,
  },
  categoriesList: {
    paddingHorizontal: 20,
  },
  categoryItem: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    marginRight: 12,
    borderRadius: 20,
    backgroundColor: '#F0F0F0',
  },
  selectedCategoryItem: {
    backgroundColor: '#2E7D32',
  },
  categoryText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#666',
  },
  selectedCategoryText: {
    color: 'white',
  },
  shopsList: {
    padding: 20,
  },
  shopCard: {
    backgroundColor: 'white',
    borderRadius: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
    overflow: 'hidden',
  },
  shopImageContainer: {
    position: 'relative',
  },
  shopImage: {
    width: '100%',
    height: 200,
  },
  shopImagePlaceholder: {
    width: '100%',
    height: 200,
    justifyContent: 'center',
    alignItems: 'center',
  },
     shopImagePlaceholderText: {
     fontSize: 48,
   },
   
   categoryBadge: {
    position: 'absolute',
    top: 12,
    right: 12,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
  },
  categoryBadgeText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
  },
  shopInfo: {
    padding: 20,
  },
  shopName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  shopDescription: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
    marginBottom: 12,
  },
  shopAddress: {
    fontSize: 14,
    color: '#2E7D32',
    marginBottom: 4,
  },
  shopHours: {
    fontSize: 14,
    color: '#666',
  },
  emptyContainer: {
    alignItems: 'center',
    paddingVertical: 60,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#666',
    marginBottom: 8,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#999',
    textAlign: 'center',
  },
  cartButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
  },
  cartButtonText: {
    fontSize: 20,
    color: 'white',
  },
  cartBadge: {
    position: 'absolute',
    top: -5,
    right: -5,
    backgroundColor: '#FF4444',
    borderRadius: 10,
    width: 20,
    height: 20,
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1,
  },
  cartBadgeText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  noAuthContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 40,
  },
  noAuthIcon: {
    fontSize: 80,
    marginBottom: 20,
  },
  noAuthTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
    textAlign: 'center',
  },
  noAuthText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 30,
    lineHeight: 24,
  },
  loginButton: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 30,
    paddingVertical: 15,
    borderRadius: 25,
  },
  loginButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default ShopsScreen;

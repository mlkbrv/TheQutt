import React, { createContext, useContext, useState, useEffect, useRef } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import { API_CONFIG } from '../config/api';
import { getTimeUntilExpiry, shouldRefreshToken, getTokenInfo } from '../utils/jwtUtils';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [token, setToken] = useState(null);
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const refreshTimeoutRef = useRef(null);
  const lastRefreshTimeRef = useRef(0);

  useEffect(() => {
    loadStoredToken();
    return () => {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (refreshTimeoutRef.current) {
        clearTimeout(refreshTimeoutRef.current);
      }
    };
  }, []);

  const loadStoredToken = async () => {
    try {
      const storedToken = await AsyncStorage.getItem('accessToken');
      console.log('üîç Loaded stored token:', storedToken ? 'exists' : 'not found');
      if (storedToken) {
        setToken(storedToken);
        console.log('‚úÖ Token set in state:', storedToken.substring(0, 20) + '...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const tokenInfo = getTokenInfo(storedToken);
        if (tokenInfo) {
          console.log('üìä Token info:', tokenInfo);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await loadUserInfo(storedToken);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        if (shouldRefreshToken(storedToken)) {
          console.log('‚ö†Ô∏è Token needs immediate refresh');
          await refreshToken();
        } else {
          // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
          scheduleTokenRefresh(storedToken);
        }
      }
    } catch (error) {
      console.error('‚ùå Error loading stored token:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const loadUserInfo = async (token) => {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      setUser({ token });
    } catch (error) {
      console.error('Error loading user info:', error);
    }
  };

  const scheduleTokenRefresh = (currentToken) => {
    try {
      const timeUntilExpiry = getTimeUntilExpiry(currentToken);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
      const refreshTime = Math.max(timeUntilExpiry - (5 * 60 * 1000), 60000); // –º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
      
      console.log(`‚è∞ Token expires in ${Math.round(timeUntilExpiry / 1000)}s, will refresh in ${Math.round(refreshTime / 1000)}s`);
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
      if (refreshTimeoutRef.current) {
        clearTimeout(refreshTimeoutRef.current);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
      refreshTimeoutRef.current = setTimeout(() => {
        console.log('üîÑ Scheduled token refresh triggered');
        refreshToken();
      }, refreshTime);
      
    } catch (error) {
      console.error('‚ùå Error scheduling token refresh:', error);
    }
  };

  const login = async (accessToken, refreshToken) => {
    try {
      console.log('üîê Login called with token:', accessToken ? accessToken.substring(0, 20) + '...' : 'null');
      await AsyncStorage.setItem('accessToken', accessToken);
      if (refreshToken) {
        await AsyncStorage.setItem('refreshToken', refreshToken);
      }
      setToken(accessToken);
      console.log('‚úÖ Token stored and set in state');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const tokenInfo = getTokenInfo(accessToken);
      if (tokenInfo) {
        console.log('üìä New token info:', tokenInfo);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      await loadUserInfo(accessToken);
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      scheduleTokenRefresh(accessToken);
    } catch (error) {
      console.error('‚ùå Error storing tokens:', error);
      throw error;
    }
  };

  const refreshToken = async () => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (isRefreshing) {
      console.log('‚ö†Ô∏è Token refresh already in progress, skipping...');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏ –ª–∏ –º—ã —Ç–æ–∫–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ
    const now = Date.now();
    if (now - lastRefreshTimeRef.current < 30000) { // 30 —Å–µ–∫—É–Ω–¥
      console.log('‚ö†Ô∏è Token was refreshed recently, skipping...');
      return false;
    }

    try {
      setIsRefreshing(true);
      lastRefreshTimeRef.current = now;
      
      const storedRefreshToken = await AsyncStorage.getItem('refreshToken');
      if (!storedRefreshToken) {
        console.log('‚ùå No refresh token available');
        return false;
      }

      console.log('üîÑ Refreshing token...');
      const response = await axios.post(API_CONFIG.REFRESH_TOKEN_URL, {
        refresh: storedRefreshToken
      });

      if (response.data.access) {
        const newAccessToken = response.data.access;
        await AsyncStorage.setItem('accessToken', newAccessToken);
        setToken(newAccessToken);
        console.log('‚úÖ Token refreshed successfully');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const tokenInfo = getTokenInfo(newAccessToken);
        if (tokenInfo) {
          console.log('üìä Refreshed token info:', tokenInfo);
        }
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        scheduleTokenRefresh(newAccessToken);
        
        return true;
      }
    } catch (error) {
      console.error('‚ùå Error refreshing token:', error);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      await logout();
    } finally {
      setIsRefreshing(false);
    }
    return false;
  };

  const logout = async () => {
    try {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (refreshTimeoutRef.current) {
        clearTimeout(refreshTimeoutRef.current);
        refreshTimeoutRef.current = null;
      }
      
      await AsyncStorage.removeItem('accessToken');
      await AsyncStorage.removeItem('refreshToken');
      setToken(null);
      setUser(null);
      console.log('‚úÖ Logout completed');
    } catch (error) {
      console.error('‚ùå Error during logout:', error);
    }
  };

  const value = {
    token,
    user,
    isLoading,
    isAuthenticated: !!token,
    isRefreshing,
    login,
    logout,
    refreshToken,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
